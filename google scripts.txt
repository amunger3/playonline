// *******************************
// Handle reception of "get forms"
// *******************************

function doGet(e) {
  var params;
  if (e == undefined) {
    Logger.log("doGet error: undefined parameter!");    
    params = JSON.stringify({
      // "rsp_cd": "doGet error: undefined parameter!"
      "rsp_cd": "(1)" // (mask error messages as much as possible for safety reasons)
    });
    keep_trace_of_error("(1)", e);    
  }
  else {    
    // Logger.log("doGet: " + e);

    // Check that the form is valid
    var valid_form = true;    
    try {
      if ( (e.parameter['playerid'].indexOf('ID/') != 0) // basic defense: 'playerid' parameter shall exist and start with 'ID/'
           || (e.parameter['href'].indexOf('https://supermastermind.github.io/playonline') == -1) // basic defense: only form requests from official github page are allowed
           || (e.parameter['debuginfo'].indexOf('P1b') != 0) // basic defense: only form requests from distant sites are allowed, not from local file copies/scripts
           || (e.parameter['rankings'] != '-') ) {
        valid_form = false;
      }
    }
    catch (error) {
      valid_form = false; 
    }    
    if (valid_form) {    
      // Record data & compute rankings
      var res = record_data_and_compute_rankings(e);
      if (res.length == 0) { // ("" was returned)
        params = JSON.stringify(e);
      }
      else {
        Logger.log("doGet error: " + res);
        params = JSON.stringify({
          // "rsp_cd": "doGet error: " + res
          "rsp_cd": "(2)" // (mask error messages as much as possible for safety reasons)
        });
        keep_trace_of_error("(2): " + res, e);        
      }
    }
    else { // ignore any invalid form
      Logger.log("doGet error: invalid form!");
      params = JSON.stringify({
        // "rsp_cd": "doGet error: invalid form!"
        "rsp_cd": "(3)" // (mask error messages as much as possible for safety reasons)
      });
      keep_trace_of_error("(3)", e);
    }      
  }
  
  return ContentService
         .createTextOutput(e.parameter.my_callback_fct + "(" + params + "); console.log('The angels fully and deeply heal us');") // (Note: will fail if e is undefined)
         .setMimeType(ContentService.MimeType.JAVASCRIPT);     
  
  // old version ("Cross Origin" error)
  // var output = HtmlService.createHtmlOutput(params);
  // output.setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
  // return output;
}

// ********************************
// Handle reception of "post forms"
// ********************************

function doPost(e) {
  Logger.log("doPost error: not supported");
  keep_trace_of_error("(post)", e);
  // var output = HtmlService.createHtmlOutput("doPost error: not supported");
  var output = HtmlService.createHtmlOutput("(4)"); // (mask error messages as much as possible for safety reasons)
  output.setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
  return output;
}

// **********************************************
// Record data in google sheet & compute rankings
// **********************************************

function record_data_and_compute_rankings(e) {
  var nextRow = -1;
  var error_prefix = "error: ";
  var history_clear_advice = "";

  try {
    
    e.parameter['rankings'] = '?';    
    
    // ******************************
    // 1) Record data in google sheet
    // ******************************
    
    var doc     = SpreadsheetApp.getActiveSpreadsheet(); // (active google sheet)
    var sheet   = doc.getSheetByName(e.parameter['nbcolumns'] + ' columns'); // (tab name)
    nextRow     = sheet.getLastRow()+1; // get next row
    
    var headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    // Logger.log("column headers: " + headers);    
    var currentdate = new Date();
    var currentdatestr = Utilities.formatDate(currentdate, "Europe/Paris", "EEE, d MMM yyyy HH:mm:ss Z");
    var row = [ String(nextRow) , currentdatestr ]; // 'row' and 'date' columns
    for (var i = 2; i < headers.length; i++) { // start at 2 to avoid 'row' and 'date' columns
      if (headers[i] == 'stid') { // status for 'playerid'
        row.push('ok'); // (current game status is always ok)
      }
      else if (headers[i] == 'stip') { // status for 'ipaddress'
        row.push('ok'); // (current game status is always ok)
      }
      else {
        if (headers[i] == 'gamesok') {
          if (e.parameter[headers[i]] == "3")  {
            history_clear_advice = "<br><font color='#880000'>To store your future scores properly (with your name), make sure that your browser does not clear cookies/site data when exited...</font>";
          }
        }
        row.push(String(e.parameter[headers[i]]));
      }
    }
    sheet.getRange(nextRow, 1, 1, row.length).setValues([row]); // update google sheet

    // *******************
    // 2) Compute rankings
    // *******************
       
    // Get 'score' and 'nbcolumns' column indexes
    var rowIdx = -1;
    var dateIdx = -1;
    var playeridIdx = -1;
    var firstnameIdx = -1;
    var nbColumnsIdx = -1;    
    var scoreIdx = -1;       
    var attemptsIdx = -1;
    var timeIdx = -1;
    var perfsIdx = -1;
    var helpIdx = -1;
    var deltagamesIdx = -1;
    var stidIdx = -1;    
    var stipIdx = -1;
    var countryIdx = -1;
    var regionIdx = -1;    
    var cityIdx = -1;
    var ipaddressIdx = -1;
    for (var i = 0; i < headers.length; i++) {
      if (headers[i] == 'row') {
        rowIdx = i;
      }            
      else if (headers[i] == 'date') {
        dateIdx = i;
      }      
      else if (headers[i] == 'playerid') {
        playeridIdx = i;
      }            
      else if (headers[i] == 'firstname') {
        firstnameIdx = i;
      }            
      else if (headers[i] == 'nbcolumns') {
        nbcolumnsIdx = i;
      }      
      else if (headers[i] == 'score') {
        scoreIdx = i;
      }      
      else if (headers[i] == 'attempts') {
        attemptsIdx = i;
      }      
      else if (headers[i] == 'time') {
        timeIdx = i;
      }      
      else if (headers[i] == 'perfs') {
        perfsIdx = i;
      }      
      else if (headers[i] == 'help') {
        helpIdx = i;
      }        
      else if (headers[i] == 'deltagames') {
        deltagamesIdx = i;
      }              
      else if (headers[i] == 'stid') {
        stidIdx = i;
      }      
      else if (headers[i] == 'stip') {
        stipIdx = i;
      }            
      else if (headers[i] == 'country') {
        countryIdx = i;
      }            
      else if (headers[i] == 'region') {
        regionIdx = i;
      }                  
      else if (headers[i] == 'city') {
        cityIdx = i;
      }            
      else if (headers[i] == 'ipaddress') {
        ipaddressIdx = i;
      }                  
    } // end for
    if (rowIdx == -1) {
      throw ("cannot find 'row' column index");
    }    
    if (dateIdx == -1) {
      throw ("cannot find 'date' column index");
    }
    if ((playeridIdx == -1) || (playeridIdx != 2)) { // (index 2 is used for errors, see error_prefix usage)
      throw ("cannot find 'playerid' column index or invalid index");
    }    
    if (firstnameIdx == -1) {
      throw ("cannot find 'firstname' column index");
    }    
    if (nbcolumnsIdx == -1) {
      throw ("cannot find 'nbcolumns' column index");
    }
    if (scoreIdx == -1) {
      throw ("cannot find 'score' column index");
    }
    if (attemptsIdx == -1) {
      throw ("cannot find 'attempts' column index");
    }
    if (timeIdx == -1) {
      throw ("cannot find 'time' column index");
    }
    if (perfsIdx == -1) {
      throw ("cannot find 'perfs' column index");
    }
    if (helpIdx == -1) {
      throw ("cannot find 'help' column index");
    }    
    if (deltagamesIdx == -1) {
      throw ("cannot find 'deltagames' column index");
    }        
    if (stidIdx == -1) { // status for 'playerid'
      throw ("cannot find 'stid' column index");
    }
    if ((stipIdx == -1) || (stipIdx != stidIdx+1)) { // status for 'ipaddress' (next to status for 'playerid')
      throw ("cannot find 'stip' column index or invalid index");
    }    
    if (countryIdx == -1) {
      throw ("cannot find 'country' column index");
    }
    if (regionIdx == -1) {
      throw ("cannot find 'region' column index");
    }    
    if (cityIdx == -1) {
      throw ("cannot find 'city' column index");
    }
    if ( (ipaddressIdx == -1) 
         || (ipaddressIdx <= rowIdx) || (ipaddressIdx <= dateIdx) || (ipaddressIdx <= playeridIdx) || (ipaddressIdx <= firstnameIdx) 
         || (ipaddressIdx <= nbcolumnsIdx) || (ipaddressIdx <= scoreIdx) || (ipaddressIdx <= attemptsIdx) || (ipaddressIdx <= timeIdx) 
         || (ipaddressIdx <= perfsIdx) || (ipaddressIdx <= helpIdx) || (ipaddressIdx <= deltagamesIdx) || (ipaddressIdx <= stidIdx) 
         || (ipaddressIdx <= stipIdx)  || (ipaddressIdx <= countryIdx) || (ipaddressIdx <= regionIdx) || (ipaddressIdx <= cityIdx) ) { // ('ipaddress' is the last useful column index)
      throw ("cannot find 'ipaddress' column index or invalid index");
    }
    
    var startRow = 2; // start at 2 to avoid headers
    var values = sheet.getRange(startRow, 1, nextRow-startRow+1, ipaddressIdx+1).getValues();
    
    if (values[nextRow-startRow][rowIdx] != nextRow) {
      throw ("invalid rowIdx: " + values[nextRow-startRow][rowIdx] + "!=" + nextRow + " (#1)");
    }
    else if ( (nextRow-startRow >= 1) && (values[nextRow-startRow-1][rowIdx] != nextRow-1) ) {
      throw ("invalid rowIdx: " + values[nextRow-startRow-1][rowIdx] + "!=" + (nextRow-1) + " (#2)");
    }

    // 2.1) Skip games older than several months
    // *****************************************
       
    var max_nb_months = 3;
    var currentdate_month_cnt = currentdate.getFullYear()*12 + currentdate.getMonth();
    var valuesFiltered = values.filter(function (row) {
      var fromDate = new Date(row[dateIdx]);
      return ( (currentdate_month_cnt - (fromDate.getFullYear()*12 + fromDate.getMonth()) <= max_nb_months) // old games are ignored
               && (row[playeridIdx].indexOf(error_prefix) == -1) ); // errors are ignored
    }); 
    // Logger.log(valuesFiltered);
    
    // 2.2) Update oldest game status for current player
    // *************************************************

    // Sequence targeted for each player: most recent games ... 'ok' (up to 5 times) ... 'old' (n times, n>=0) ... oldest games
    var nb_max_games_for_rankings = 5;
    var min_nb_max_games_for_rankings = 2;
    var nb_max_games_for_rankings_applied;

    // a) Update firstname and status for 'playerid' in google sheet & filtered values
    nb_max_games_for_rankings_applied = nb_max_games_for_rankings;
    var currentplayerid = e.parameter['playerid'];
    var cnt_id = 0;
    var firstname = '?';
    for (var i = valuesFiltered.length-1; i >= 0; i--) { // loop on filtered rows
      if (valuesFiltered[i][playeridIdx].indexOf(currentplayerid) == 0) {
        cnt_id++;
        if (valuesFiltered[i][stidIdx] == 'ok') { // status for 'playerid'
          if (firstname == '?') { // first loop
            firstname = valuesFiltered[i][firstnameIdx];
          }
          else if ((firstname.length > 1) && (valuesFiltered[i][firstnameIdx].indexOf(firstname) != 0)) {
            var row_nb = valuesFiltered[i][rowIdx];
            sheet.getRange(row_nb, firstnameIdx+1, 1, 1).setValue(firstname); // update 'firstname' in google sheet
            valuesFiltered[i][firstnameIdx] = firstname; // update 'firstname' in filtered values
          }
          if (cnt_id > nb_max_games_for_rankings_applied) {
            var row_nb = valuesFiltered[i][rowIdx];
            sheet.getRange(row_nb, stidIdx+1, 1, 1).setValue('old'); // update status for 'playerid' in google sheet
            valuesFiltered[i][stidIdx] = 'old'; // update status for 'playerid' in filtered values
            if (cnt_id > nb_max_games_for_rankings) {
              break;
            }
          }
        }
        else if (valuesFiltered[i][stidIdx] == 'old') {
          if (cnt_id > nb_max_games_for_rankings) {
            break;
          }
        }
        else {
          throw ("invalid status for playerid: " + valuesFiltered[i][stidIdx] + " (currentplayerid: " + currentplayerid + ")");
        }
        if (valuesFiltered[i][deltagamesIdx] > 0) { // some started games were skipped
          nb_max_games_for_rankings_applied = Math.max(nb_max_games_for_rankings_applied - valuesFiltered[i][deltagamesIdx], min_nb_max_games_for_rankings);
        }
      } // currentplayerid
    } // end for
    if (cnt_id == 0) {
      throw ("null cnt_id for current playerid: " + currentplayerid);
    }

    // b) Update status for 'ipaddress' in google sheet & filtered values
    nb_max_games_for_rankings_applied = nb_max_games_for_rankings;
    var currentplayeripaddress = e.parameter['ipaddress'];
    var currentplayeripaddressRoutingPrefixExtracted = extractRoutingPrefix(currentplayeripaddress);
    var cnt_ip = 0;
    for (var i = valuesFiltered.length-1; i >= 0; i--) { // loop on filtered rows
      if (extractRoutingPrefix(valuesFiltered[i][ipaddressIdx]).indexOf(currentplayeripaddressRoutingPrefixExtracted) == 0) {
        cnt_ip++;
        if (valuesFiltered[i][stipIdx] == 'ok') { // status for 'ipaddress'
          if (cnt_ip > nb_max_games_for_rankings_applied) {
            var row_nb = valuesFiltered[i][rowIdx];
            sheet.getRange(row_nb, stipIdx+1, 1, 1).setValue('old'); // update status for 'ipaddress' in google sheet
            valuesFiltered[i][stipIdx] = 'old'; // update status for 'ipaddress' in filtered values
            if (cnt_ip > nb_max_games_for_rankings) {
              break;
            }
          }
        }
        else if (valuesFiltered[i][stipIdx] == 'old') {
          if (cnt_ip > nb_max_games_for_rankings) {
            break;
          }
        }        
        else {
          throw ("invalid status for ipaddress: " + valuesFiltered[i][stipIdx] + " (currentplayeripaddress: " + currentplayeripaddress + ")");
        }
        if (valuesFiltered[i][deltagamesIdx] > 0) { // some started games were skipped
          nb_max_games_for_rankings_applied = Math.max(nb_max_games_for_rankings_applied - valuesFiltered[i][deltagamesIdx], min_nb_max_games_for_rankings);
        }        
      } // currentplayeripaddress
    } // end for
    if (cnt_ip == 0) {
      throw ("null cnt_ip for current ipaddress: " + currentplayeripaddress);
    }
   
    // 2.3) Skip games which are not the last ones
    // *******************************************    
    
    var valuesFiltered2 = valuesFiltered.filter(function (row) {
      return ((row[stidIdx] == 'ok') && (row[stipIdx] == 'ok'));
    });
    // Logger.log(valuesFiltered2);
    
    // 2.4) Sort scores
    // ****************
    
    var valuesSorted = valuesFiltered2.sort(function(a, b) {
      return b[scoreIdx] - a[scoreIdx];
    });
    // Logger.log(valuesSorted);
    
    // 2.5) HTML output
    // ****************

    var comment_str = "";
    switch (e.parameter['nbcolumns']) {
      case '3':
        comment_str = "(very easy)";
        break;
      case '4':
        comment_str = "(easy)";
        break;
      case '5':
        comment_str = "(classical)";
        break;
      case '6':
        comment_str = "(advanced)";
        break;
      case '7':
        comment_str = "(expert!)";
        break;        
      default:
    }
      
    var tdStr = "<td style='border:1px solid black;margin:2px;padding:2px;text-align:center;'>";
    var rankingsStr = "<center><font color='#000000'><h1><b>Best scores for " + e.parameter['nbcolumns'] + "-columns games " + comment_str + "</b></h1>";
    rankingsStr = rankingsStr + "<font style='color:#999999;font-size:11px'>The last " + nb_max_games_for_rankings + " games of each player are taken into account, games older than " + max_nb_months + " months are ignored" + history_clear_advice + "</font><hr style='height:1px; visibility:hidden;'>";
    rankingsStr = rankingsStr + "<table style='border:1px solid black;margin:1px;padding:1px;border-collapse:collapse;width:100%;'><tr style='background-color:#EEEEEE;font-size:11px'>" 
                              + tdStr + "<b>&nbsp;</b></td>" 
                              + tdStr + "<b>score</b></td>" 
                              + tdStr + "<b>name</b></td>" 
                              + tdStr + "<b>country</b></td>" 
                              + tdStr + "<b>region</b></td>" 
                              + tdStr + "<b>city</b></td>" 
                              + tdStr + "<b>&nbsp;#&nbsp;</b></td>" 
                              + tdStr + "<b>&#x23F0;</b></td>" 
                              + tdStr + "<b>perfs</b></td>" 
                              + tdStr + "<b>help</b></td>"
                              + tdStr + "<b>date</b></td></tr>";
    var rankings_size;
    var max_rankings_size = 999;
    var max_ranks_listed = 15; // 15+nb_max_games_for_rankings in total
    if (valuesSorted.length > max_rankings_size) {
      rankings_size = max_rankings_size;
    }
    else {
      rankings_size = valuesSorted.length;
    }

    for (var i = 0; i < rankings_size; i++) {
      var add_line = (i < max_ranks_listed);
      if (valuesSorted[i][rowIdx] == nextRow) { // current game row is highlighted
        rankingsStr = rankingsStr + "<tr style='background-color:#FF00FF;font-size:11px'>"; // ("FF00FF" will be explictly checked by game scripts)
        add_line = true;
      }
      else if (valuesSorted[i][playeridIdx] == currentplayerid) { // current player's rows are highlighted slightly
        rankingsStr = rankingsStr + "<tr style='background-color:#FFBBFF;font-size:11px'>";        
        add_line = true;
      }
      else if (extractRoutingPrefix(valuesSorted[i][ipaddressIdx]) == currentplayeripaddressRoutingPrefixExtracted) {
        rankingsStr = rankingsStr + "<tr style='font-size:11px'>";
        add_line = true;
      }      
      else if (add_line) {
        rankingsStr = rankingsStr + "<tr style='font-size:11px'>";
      }

      if (add_line) {
        var helpStr = 'no';
        if (valuesSorted[i][helpIdx] != '0') {
          helpStr = valuesSorted[i][helpIdx] + 'x'; // 'x' for 'times'
        }      
        rankingsStr = rankingsStr 
                      + tdStr + "<b>" + String(i+1) + "</b></td>"
                      + tdStr + "<b>" + Math.round(valuesSorted[i][scoreIdx]) + "</b></td>"
                      + tdStr + "<b>" + valuesSorted[i][firstnameIdx].substring(0,12).trim() + "</b></td>"
                      + tdStr + "<b>" + valuesSorted[i][countryIdx].replace('~','').substring(0,17).trim() + "</b></td>"
                      + tdStr + "<b>" + valuesSorted[i][regionIdx].replace('~','').substring(0,17).trim() + "</b></td>"
                      + tdStr + "<b>" + valuesSorted[i][cityIdx].replace('~','').substring(0,20).trim() + "</b></td>"
                      + tdStr + "<b>" + valuesSorted[i][attemptsIdx] + "</b></td>"
                      + tdStr + "<b>" + valuesSorted[i][timeIdx] + "</b></td>"
                      + tdStr + "<b>" + ((valuesSorted[i][perfsIdx] == "-") ? "&#x2234;" : valuesSorted[i][perfsIdx]) + "</b></td>"
                      + tdStr + "<b>" + helpStr + "</b></td>"
                      + tdStr + "<b>" + Utilities.formatDate(new Date(valuesSorted[i][dateIdx]), "Europe/Paris", "d MMM yy") + "</b></td>"
        rankingsStr = rankingsStr + '</tr>';
      }
    } // end for
    rankingsStr = rankingsStr + "</table></font></center>"
        
    Logger.log(rankingsStr);    
    e.parameter['rankings'] = rankingsStr;

  }
  catch(error) {
    Logger.log("record_data_and_compute_rankings error: " + error);
    if (nextRow != -1) {
      try {
        var currentdatestr = Utilities.formatDate(new Date(), "Europe/Paris", "EEE, d MMM yyyy HH:mm:ss Z");
        var row = [ String(nextRow) , currentdatestr , error_prefix + error /* (playeridIdx column) */];
        sheet.getRange(nextRow, 1, 1, row.length).setValues([row]); // may override (partially) the values written by the nominal call to setValues()    
        return error + " (sheet updated)"; // (error)
      }
      catch (error2) {
        Logger.log("record_data_and_compute_rankings error: " + error2);
        return error + " / " + error2 + " (sheet not updated #1)"; // (error)
      }
    }
    return error + " (sheet not updated #2)"; // (error)
  }
  
  return "";  // (success)
}

// ************************
// Keep trace of all errors
// ************************

function keep_trace_of_error(error_p, e) {

  try {    
    var doc     = SpreadsheetApp.getActiveSpreadsheet(); // (active google sheet)
    var sheet   = doc.getSheetByName('Debug'); // (tab name)
    var nextRow = sheet.getLastRow()+1; // get next row

    var currentdate = new Date();
    var currentdatestr = Utilities.formatDate(currentdate, "Europe/Paris", "EEE, d MMM yyyy HH:mm:ss Z");
    var e_str = "?";
    try {
      e_str = JSON.stringify(e);
    }
    catch(json_error) {
    }      
    var error_str = "error on " + currentdatestr + ": " + error_p + " -> " + e_str;    
    sheet.getRange(nextRow, 1, 1, 1).setValue(error_str); // update debug google sheet    
  }
  catch(error) {
  }

}

// *********************************************
// Extract routing prefix from IPv4/IPv6 address
// *********************************************

// Note: interesting page on IPv6 geolocation: https://community.infoblox.com/t5/IPv6-CoE-Blog/Geolocation-with-IPv6/ba-p/11752
function extractRoutingPrefix(ip_address) {
  var cnt = 0;
  var current_idx = -1;
  while ((current_idx = ip_address.indexOf(":", current_idx+1)) != -1) { // Assumption: IPv6 addresses always have ":" as separator
    cnt++;
    if (cnt == 4) { // IPv6 address
      return "IPv6/" + ip_address.substring(0, current_idx); // Extract routing prefix of the IPv6 address
    }
  }
  return "IPv4/" +  ip_address; // The full IPv4 address is used for routing
}

// **************
// Test functions
// **************

function test() {
  var e = {"parameter": "-"};
  e.parameter = {'country':'France','ipaddress':'94.239.24.130','firstname':'John','city':'Châtillon','timezone':'Europe/Paris','latitude':'48.8024','useragent':'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0','gamesok':'4','platform':'Win32','score':'28.444','my_callback_fct':'handle_rsp','href':'https://supermastermind.github.io/playonline','nbcolumns':'3','attempts':'1','longitude':'2.2935','_':'1506545491257','zip':'92320','deltagames':'0','browserlanguage':'fr','formsubmitdate':'Wed Sep 27 2017 22:51:33 GMT 0200','help':'0','rankings':'-','perfs':'-','debuginfo':'P1b/','callback':'jQuery3210953603875670034_1506545491256','time':'0 sec','region':'Île-de-France','playerid':'ID/MNEMP - Sat Sep 23 2017 00:43:35 GMT 0200'};
  doGet(e);
}

function test2() {
  Logger.log("1:" + extractRoutingPrefix("2602:252:d47:7820:79a7:3d63:a709:d1df"));
  Logger.log("2:" + extractRoutingPrefix("2602:252:d47:7820:79a7:3d63:a709:"));
  Logger.log("3:" + extractRoutingPrefix("2602:252:d47:7820:79a7:3d63:a709"));
  Logger.log("4:" + extractRoutingPrefix("fe80::6cd6:53f:6c49:912f"));
  Logger.log("5:" + extractRoutingPrefix("37:171:122:28:"));
  Logger.log("6:" + extractRoutingPrefix("37:171:122:28"));
  Logger.log("7:" + extractRoutingPrefix("37:171:122"));
  Logger.log("8:" + extractRoutingPrefix("37.171.122.28"));
}
